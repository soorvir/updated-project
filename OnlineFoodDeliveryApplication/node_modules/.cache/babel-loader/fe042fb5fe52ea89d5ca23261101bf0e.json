{"ast":null,"code":"import axios from \"axios\";\nexport default class BookingService {\n  constructor() {\n    this.uri = \"http://localhost:8980/book\";\n  }\n\n  async addBooking(numberOfSeatsToBook, flightNumber, source, destination, date) {\n    return await axios.post(this.uri + \"/booking\", {\n      numberOfSeatsToBook\n    }, {\n      params: {\n        \"fid\": flightNumber,\n        \"source\": source,\n        \"destination\": destination,\n        \"date\": date\n      }\n    }).then(response => {\n      console.log(response.data);\n\n      if (response.data.length > 3) {\n        alert(response.data);\n        return response;\n      } else {\n        localStorage.setItem(\"bid\", parseInt(response.data));\n        return response;\n      }\n    });\n  }\n\n  async addPassengers(pass1) {\n    return await axios.post(this.uri + \"/passenger/\" + localStorage.getItem(\"bid\"), pass1).then(response => {\n      console.log(response.data);\n    });\n  }\n\n  async generateTicket(ticket) {\n    const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n    return await axios.post(this.uri + \"/ticket/\" + uid + \"/\" + localStorage.getItem(\"bid\") + \"/1\", ticket).then(response => {\n      console.log(response.data);\n      localStorage.setItem(\"ticket\", JSON.stringify(response.data));\n      return response;\n    });\n  }\n\n  async getTickets() {\n    const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n    return await axios.get(this.uri + \"/getTickets/\" + uid).then(response => {\n      console.log(response.data);\n      return response;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/soorv/Downloads/FlightBookingSystem_frontend/OnlineFoodDeliveryApplication/src/services/BookingService.js"],"names":["axios","BookingService","constructor","uri","addBooking","numberOfSeatsToBook","flightNumber","source","destination","date","post","params","then","response","console","log","data","length","alert","localStorage","setItem","parseInt","addPassengers","pass1","getItem","generateTicket","ticket","uid","JSON","parse","userId","stringify","getTickets","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,cAAN,CAAqB;AAChCC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAW,4BAAX;AACH;;AAGe,QAAVC,UAAU,CAACC,mBAAD,EAAqBC,YAArB,EAAkCC,MAAlC,EAAyCC,WAAzC,EAAqDC,IAArD,EAA2D;AACvE,WAAO,MAAMT,KAAK,CAACU,IAAN,CAAW,KAAKP,GAAL,GAAS,UAApB,EAA+B;AAACE,MAAAA;AAAD,KAA/B,EACb;AAACM,MAAAA,MAAM,EAAC;AAAC,eAAML,YAAP;AAAoB,kBAASC,MAA7B;AAAoC,uBAAcC,WAAlD;AAA8D,gBAAOC;AAArE;AAAR,KADa,EACwEG,IADxE,CAC6EC,QAAQ,IAAI;AAClGC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;;AACA,UAAGH,QAAQ,CAACG,IAAT,CAAcC,MAAd,GAAqB,CAAxB,EAA0B;AACtBC,QAAAA,KAAK,CAACL,QAAQ,CAACG,IAAV,CAAL;AACA,eAAOH,QAAP;AACH,OAHD,MAGM;AACFM,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA2BC,QAAQ,CAACR,QAAQ,CAACG,IAAV,CAAnC;AACA,eAAOH,QAAP;AACH;AACJ,KAVY,CAAb;AAWH;;AAGkB,QAAbS,aAAa,CAACC,KAAD,EAAO;AACtB,WAAO,MAAMvB,KAAK,CAACU,IAAN,CAAW,KAAKP,GAAL,GAAS,aAAT,GAAuBgB,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAlC,EAA8DD,KAA9D,EAAqEX,IAArE,CAA0EC,QAAQ,IAAI;AAC/FC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACH,KAFY,CAAb;AAGH;;AAEmB,QAAdS,cAAc,CAACC,MAAD,EAAQ;AACxB,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,EAAyCM,MAArD;AACA,WAAO,MAAM9B,KAAK,CAACU,IAAN,CAAW,KAAKP,GAAL,GAAS,UAAT,GAAoBwB,GAApB,GAAwB,GAAxB,GAA4BR,YAAY,CAACK,OAAb,CAAqB,KAArB,CAA5B,GAAwD,IAAnE,EAAwEE,MAAxE,EACZd,IADY,CACPC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BQ,IAAI,CAACG,SAAL,CAAelB,QAAQ,CAACG,IAAxB,CAA9B;AACA,aAAOH,QAAP;AACH,KALY,CAAb;AAMH;;AAEe,QAAVmB,UAAU,GAAG;AACf,UAAML,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,EAAyCM,MAArD;AACA,WAAO,MAAM9B,KAAK,CAACiC,GAAN,CAAU,KAAK9B,GAAL,GAAS,cAAT,GAAwBwB,GAAlC,EACZf,IADY,CACPC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AAEA,aAAOH,QAAP;AACH,KALY,CAAb;AAMH;;AA7C+B","sourcesContent":["import axios from \"axios\"\r\n\r\nexport default class BookingService {\r\n    constructor() {\r\n        this.uri = \"http://localhost:8980/book\";\r\n    }\r\n\r\n \r\n    async addBooking(numberOfSeatsToBook,flightNumber,source,destination,date) {\r\n        return await axios.post(this.uri+\"/booking\",{numberOfSeatsToBook},\r\n        {params:{\"fid\":flightNumber,\"source\":source,\"destination\":destination,\"date\":date}}).then(response => {\r\n            console.log(response.data)\r\n            if(response.data.length>3){\r\n                alert(response.data)\r\n                return response\r\n            } else{\r\n                localStorage.setItem(\"bid\",parseInt(response.data))\r\n                return response\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    async addPassengers(pass1){\r\n        return await axios.post(this.uri+\"/passenger/\"+localStorage.getItem(\"bid\"),pass1).then(response => {\r\n            console.log(response.data)\r\n        })\r\n    }\r\n\r\n    async generateTicket(ticket){\r\n        const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\r\n        return await axios.post(this.uri+\"/ticket/\"+uid+\"/\"+localStorage.getItem(\"bid\")+\"/1\",ticket)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            localStorage.setItem(\"ticket\",JSON.stringify(response.data))\r\n            return response;\r\n        })\r\n    }\r\n\r\n    async getTickets() {\r\n        const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\r\n        return await axios.get(this.uri+\"/getTickets/\"+uid)\r\n        .then(response => {\r\n            console.log(response.data)\r\n     \r\n            return response;\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}